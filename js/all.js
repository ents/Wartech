// Generated by IcedCoffeeScript 1.6.3-f
var iced, request, session_id, __iced_k, __iced_k_noop,
  __slice = [].slice;

iced = {
  Deferrals: (function() {
    function _Class(_arg) {
      this.continuation = _arg;
      this.count = 1;
      this.ret = null;
    }

    _Class.prototype._fulfill = function() {
      if (!--this.count) {
        return this.continuation(this.ret);
      }
    };

    _Class.prototype.defer = function(defer_params) {
      var _this = this;
      ++this.count;
      return function() {
        var inner_params, _ref;
        inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (defer_params != null) {
          if ((_ref = defer_params.assign_fn) != null) {
            _ref.apply(null, inner_params);
          }
        }
        return _this._fulfill();
      };
    };

    return _Class;

  })(),
  findDeferral: function() {
    return null;
  },
  trampoline: function(_fn) {
    return _fn();
  }
};
__iced_k = __iced_k_noop = function() {};

window.api = {};

session_id = null;

request = function(method, data, callback) {
  var url;
  if (session_id) {
    data.session_id = session_id;
  }
  url = 'http://logic.wartech.pro/' + method;
  return $.ajax(url, data, function(reply) {
    return callback($.parseJSON(reply));
  });
};

window.api.init = function(callback) {
  if (!$.cookie('session_id')) {
    return request('init', {}, function(reply) {
      session_id = reply.session_id;
      $.cookie('session_id', session_id);
      return callback();
    });
  } else {
    session_id = $.cookie('session_id');
    return callback();
  }
};

window.api.getAllUsers = function(callback) {
  return request('get_all_users', {}, callback);
};

window.api.requestFight = function(fight_with, callback) {
  return request('request_fight', {
    fight_with: fight_with
  }, callback);
};

window.api.getAllModules = function(callback) {
  return request('get_all_modules', {}, callback);
};

window.api.getUserRobot = function(callback) {
  return request('get_user_robot', {}, callback);
};

window.api.getUserModules = function(callback) {
  return request('get_user_modules', {}, callback);
};

window.api.setModuleToSlot = function(slot_id, module_id, callback) {
  return request('set_module_to_slot', {
    slot_id: slot_id,
    module_id: module_id
  }, callback);
};

window.api.createNewUser = function(callback) {
  return request('create_new_user', {}, callback);
};

window.api.login = function(login, password, callback) {
  return request('login', {
    login: login,
    password: password
  }, callback);
};

window.inventory = {};

window.inventory.init = function() {};

window.robot = {};

window.robot.init = function(callback) {
  var modules, robot, url, userModules, ___iced_passed_deferral, __iced_deferrals, __iced_k, _robot,
    _this = this;
  __iced_k = __iced_k_noop;
  ___iced_passed_deferral = iced.findDeferral(arguments);
  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      parent: ___iced_passed_deferral,
      filename: "js/all.js",
      funcname: "init"
    });
    api.getUserRobot(__iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return _robot = arguments[0];
        };
      })(),
      lineno: 63
    }));
    api.getAllModules(deffer(allModules));
    api.getUserModules(deffer(userModules));
    __iced_deferrals._fulfill();
  })(function() {
    cb;
    modules = allModules;
    userModules = _modules;
    robot = _robot;
    url = 'hull/' + _robot.hull_name;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "js/all.js",
        funcname: "init"
      });
      template.load(url, function(reply) {});
      __iced_deferrals._fulfill();
    })(function() {
      cb($('.hull').html(reply).addClass(robot.hull_name));
      return callback();
    });
  });
};

window.template = {};

window.template.load = function(url, callback) {
  url = 'template/' + url + '.html';
  return $.get(url, function(reply) {
    return callback(reply);
  });
};
